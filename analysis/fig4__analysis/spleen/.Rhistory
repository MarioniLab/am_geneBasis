genes_tal1_chimera_false[1:5,]
corr.thresh = 0.5
genes = list("wt_chimera" = genes_WT_chimera , "tal1_false" = genes_tal1_chimera_false , "tal1_true" = genes_tal1_chimera_true)
stat = lapply(1:length(genes) , function(i){
current.genes = genes[[i]]
current.stat = compare_gene_selections(sce , current.genes , genes_atlas_E8.5 , corr.thresh = corr.thresh, rank.thresh = 250)
current.stat$id = names(genes_to_compare)[i]
return(current.stat)
})
stat = do.call(rbind , stat)
stat
stat = stat[stat$rank <= rank.thresh , ]
stat
table(stat$id)
table(stat$gene)
corr.thresh = 0.5
rank.thresh = 100
genes = list("wt_chimera" = genes_WT_chimera , "tal1_false" = genes_tal1_chimera_false , "tal1_true" = genes_tal1_chimera_true)
stat = lapply(1:length(genes) , function(i){
current.genes = genes[[i]]
current.stat = compare_gene_selections(sce , current.genes , genes_atlas_E8.5 , corr.thresh = corr.thresh, rank.thresh = 250)
current.stat$id = names(genes_to_compare)[i]
return(current.stat)
})
stat = do.call(rbind , stat)
stat = merge(stat , rowdata , all.x = T, all.y = F)
stat = stat[stat$rank <= rank.thresh , ]
table(stat$gene_symbol)
corr.thresh = 0.5
rank.thresh = 150
genes = list("wt_chimera" = genes_WT_chimera , "tal1_false" = genes_tal1_chimera_false , "tal1_true" = genes_tal1_chimera_true)
stat = lapply(1:length(genes) , function(i){
current.genes = genes[[i]]
current.stat = compare_gene_selections(sce , current.genes , genes_atlas_E8.5 , corr.thresh = corr.thresh, rank.thresh = 250)
current.stat$id = names(genes_to_compare)[i]
return(current.stat)
})
stat = do.call(rbind , stat)
stat = merge(stat , rowdata , all.x = T, all.y = F)
stat = stat[stat$rank <= rank.thresh , ]
tab = table(stat$gene_symbol)
tab
genes_consistent = names(tab)[tab > 1]
genes_consistent
systems = c("atlas_E8.5" , "atlas_E8.5_chimera_WT" , "atlas_E8.5_tal1")
meta_all = lapply(systems , function(system){
print(system)
meta = get_meta(system , genes_consistent)
return(meta)
})
meta_all = do.call(rbind , meta_all)
plots = lapply(stat$gene_symbol[stat$rank <= rank.thresh] , function(gene){
p = get_plot(gene)
ggsave(filename = paste0(figures.dir, "against_wt/chimera/" , gene , ".png"), plot = p, width = 7, height = 4)
return(p)
})
plots = lapply(genes_consistent , function(gene){
p = get_plot(gene)
ggsave(filename = paste0(figures.dir, "against_wt/chimera/" , gene , ".png"), plot = p, width = 7, height = 4)
return(p)
})
cor(as.matrix(logcounts(sce["Tdgf1" , ])) , as.matrix(logcounts(sce["Myl7",])))
dim(sce)
as.matrix(logcounts(sce["Tdgf1" , ]))
rowdata[rowdata$gene_symbol == "Tdgf1"]
rowdata[rowdata$gene_symbol == "Tdgf1" , ]
rowdata[rowdata$gene_symbol == "Myl7" , ]
cor(as.matrix(logcounts(sce["ENSMUSG00000032494" , ])) , as.matrix(logcounts(sce["ENSMUSG00000020469",])))
cor(as.numeric(logcounts(sce["ENSMUSG00000032494" , ])) , as.numeric(logcounts(sce["ENSMUSG00000020469",])))
cor(as.numeric(logcounts(sce["ENSMUSG00000032494" , ])) , as.numeric(logcounts(sce["ENSMUSG00000020469",])) , method = "pearson")
cor(as.numeric(logcounts(sce["ENSMUSG00000032494" , ])) , as.numeric(logcounts(sce["ENSMUSG00000020469",])) , method = "spearman")
get_plot = function(gene){
#meta_all = meta_all[order(meta_all[, gene]) , ]
p = ggplot(meta_all , aes(x = V1 , y = V2 , col = meta_all[, gene])) +
geom_point(size=.5) +
scale_color_gradient(low = "azure3" , high = "darkgreen") +
theme_classic() +
facet_wrap(~system) +
ggtitle(gene)
return(p)
}
get_plot = function(gene){
meta_all = meta_all[order(meta_all[, gene]) , ]
p = ggplot(meta_all , aes(x = V1 , y = V2 , col = meta_all[, gene])) +
geom_point(size=.25) +
scale_color_gradient(low = "azure3" , high = "darkgreen") +
theme_classic() +
facet_wrap(~system) +
ggtitle(gene)
return(p)
}
plots = lapply(genes_consistent , function(gene){
p = get_plot(gene)
ggsave(filename = paste0(figures.dir, "against_wt/chimera/" , gene , ".png"), plot = p, width = 7, height = 4)
return(p)
})
corr.thresh = 0.5
rank.thresh = 150
genes = list("wt_chimera" = genes_WT_chimera , "tal1_false" = genes_tal1_chimera_false , "tal1_true" = genes_tal1_chimera_true)
stat = lapply(1:length(genes) , function(i){
current.genes = genes[[i]]
current.stat = compare_gene_selections(sce , current.genes , genes_atlas_E8.5 , corr.thresh = corr.thresh, rank.thresh = 250)
current.stat$id = names(genes)[i]
return(current.stat)
})
stat = do.call(rbind , stat)
stat = merge(stat , rowdata , all.x = T, all.y = F)
stat = stat[stat$rank <= rank.thresh , ]
tab = table(stat$gene_symbol)
genes_consistent = names(tab)[tab > 1]
genes_consistent
corr.thresh = 0.5
rank.thresh = 150
genes_to_compare = list("wt_chimera" = genes_WT_chimera , "tal1_false" = genes_tal1_chimera_false)
stat = lapply(1:length(genes_to_compare) , function(i){
current.genes_to_compare = genes_to_compare[[i]]
current.stat = compare_gene_selections(sce , genes_atlas_E8.5 , current.genes_to_compare , corr.thresh = corr.thresh, rank.thresh = 250)
current.stat$id = names(genes_to_compare)[i]
return(current.stat)
})
stat = do.call(rbind , stat)
stat = merge(stat , rowdata , all.x = T, all.y = F)
stat = stat[stat$rank <= rank.thresh , ]
stat
tab = table(stat$gene_symbol)
genes_consistent = names(tab)[tab > 1]
genes_consistent
systems = c("atlas_E8.5" , "atlas_E8.5_chimera_WT" , "atlas_E8.5_tal1")
meta_all = lapply(systems , function(system){
print(system)
meta = get_meta(system , genes_consistent)
return(meta)
})
meta_all = do.call(rbind , meta_all)
plots = lapply(genes_consistent , function(gene){
p = get_plot(gene)
ggsave(filename = paste0(figures.dir, "against_wt/wt/" , gene , ".png"), plot = p, width = 7, height = 4)
return(p)
})
corr.thresh = 0.5
rank.thresh = 150
genes = list("wt_chimera" = genes_WT_chimera , "tal1_false" = genes_tal1_chimera_false , "tal1_true" = genes_tal1_chimera_true)
stat = lapply(1:length(genes) , function(i){
current.genes = genes[[i]]
current.stat = compare_gene_selections(sce , current.genes , genes_atlas_E8.5 , corr.thresh = corr.thresh, rank.thresh = 250)
current.stat$id = names(genes)[i]
return(current.stat)
})
stat = do.call(rbind , stat)
stat = merge(stat , rowdata , all.x = T, all.y = F)
stat = stat[stat$rank <= rank.thresh , ]
tab = table(stat$gene_symbol)
genes_consistent = names(tab)[tab > 1]
systems = c("atlas_E8.5" , "atlas_E8.5_chimera_WT" , "atlas_E8.5_tal1")
meta_all = lapply(systems , function(system){
print(system)
meta = get_meta(system , genes_consistent)
return(meta)
})
meta_all = do.call(rbind , meta_all)
get_plot = function(meta_all,gene){
meta_all = meta_all[order(meta_all[, gene]) , ]
p = ggplot(meta_all , aes(x = V1 , y = V2 , col = meta_all[, gene])) +
geom_point(size=.25) +
scale_color_gradient(low = "azure3" , high = "darkgreen") +
theme_classic() +
facet_wrap(~system) +
ggtitle(gene)
return(p)
}
table(meta_all$celltype)
plots = lapply(genes_consistent , function(gene){
p = get_plot(meta_all[meta_all$celltype == "Forebrain/Midbrain/Hindbrain" , ] , gene)
#ggsave(filename = paste0(figures.dir, "against_wt/chimera/" , gene , ".png"), plot = p, width = 7, height = 4)
print(p)
})
plots = lapply(genes_consistent , function(gene){
p = get_plot(meta_all[meta_all$celltype == "Erythroid3" , ] , gene)
#ggsave(filename = paste0(figures.dir, "against_wt/chimera/" , gene , ".png"), plot = p, width = 7, height = 4)
print(p)
})
# add rowdata w normal gene names
rowdata = as.data.frame(rowData(sce))
colnames(rowdata) = c("gene" , "gene_symbol")
# read gene selection
genes_atlas_E8.5 = readRDS(paste0(root.dir , "data/gene_selection/" , system , "/gene_selection.Rds"))
genes_atlas_E8.5[1:10,]
genes_atlas_E8.5 = merge(genes_atlas_E8.5 , rowdata )
genes_atlas_E8.5[]:10,1
genes_atlas_E8.5[1:5,]
genes_atlas_E8.5 = genes_atlas_E8.5[, c( "gene_symbol" , "rank")]
genes_atlas_E8.5[1;4,]
genes_atlas_E8.5[1:4,]
colnames(genes_atlas_E8.5) = c("gene" , "rank")
genes_WT_chimera = readRDS(paste0(root.dir , "data/gene_selection/" , "atlas_E8.5_chimera_WT" , "/gene_selection.Rds"))
genes_WT_chimera = merge(genes_WT_chimera , rowdata )
genes_WT_chimera = genes_WT_chimera[, c( "gene_symbol" , "rank")]
colnames(genes_WT_chimera) = c("gene" , "rank")
genes_atlas_E8.5 = genes_atlas_E8.5[order(genes_atlas_E8.5$rank) , ]
genes_WT_chimera = readRDS(paste0(root.dir , "data/gene_selection/" , "atlas_E8.5_chimera_WT" , "/gene_selection.Rds"))
genes_WT_chimera = merge(genes_WT_chimera , rowdata )
genes_WT_chimera = genes_WT_chimera[, c( "gene_symbol" , "rank")]
colnames(genes_WT_chimera) = c("gene" , "rank")
genes_WT_chimera = genes_WT_chimera[order(genes_WT_chimera$rank) , ]
genes_tal1_chimera_true = readRDS(paste0(root.dir , "data/gene_selection/" , "atlas_E8.5_tal1" , "/gene_selection_TRUE.Rds"))
genes_tal1_chimera_true = merge(genes_tal1_chimera_true , rowdata )
genes_tal1_chimera_true = genes_tal1_chimera_true[, c( "gene_symbol" , "rank")]
colnames(genes_tal1_chimera_true) = c("gene" , "rank")
genes_tal1_chimera_true = genes_tal1_chimera_true[order(genes_tal1_chimera_true$rank) , ]
genes_tal1_chimera_false = readRDS(paste0(root.dir , "data/gene_selection/" , "atlas_E8.5_tal1" , "/gene_selection_FALSE.Rds"))
genes_tal1_chimera_false = merge(genes_tal1_chimera_false , rowdata )
genes_tal1_chimera_false = genes_tal1_chimera_false[, c( "gene_symbol" , "rank")]
colnames(genes_tal1_chimera_false) = c("gene" , "rank")
genes_tal1_chimera_false = genes_tal1_chimera_false[order(genes_tal1_chimera_false$rank) , ]
genes_tal1_chimera_false[]
get_plot = function(meta_all ,gene){
meta_all = meta_all[order(meta_all[, gene]) , ]
p = ggplot(meta_all , aes(x = V1 , y = V2 , col = meta_all[, gene])) +
geom_point(size=.25) +
scale_color_gradient(low = "azure3" , high = "darkgreen") +
theme_classic() +
facet_wrap(~system) +
ggtitle(gene)
return(p)
}
get_meta = function(system , genes){
# read sce
sce = readRDS(paste0(root.dir , "data/scRNA_datasets/" , system , "/sce_" , system , ".Rds"))
rownames(sce) = rowData(sce)[,2]
sce = sce[rownames(sce) %in% genes , ]
# get meta w/umaps
meta = as.data.frame(colData(sce))
if (!( "cell" %in% colnames(meta) )){
meta = rownames_to_column(meta , var = "cell")
}
meta$sample = factor(meta$sample)
meta$celltype = factor(meta$celltype)
if ("umap" %in% reducedDimNames(sce)){
umaps = as.data.frame( reducedDim(sce , "umap"))
colnames(umaps)[which(colnames(umaps) %in% c("x"))] = "V1"
colnames(umaps)[which(colnames(umaps) %in% c("y"))] = "V2"
} else {
umaps = as.data.frame( reducedDim(sce , "UMAP"))
}
if (!( "cell" %in% colnames(umaps) )){
umaps = rownames_to_column(umaps , var = "cell")
}
counts = as.data.frame(t(as.matrix(logcounts(sce))))
counts = rownames_to_column(counts , var = "cell")
meta =  merge(meta , counts)
meta = merge(meta , umaps)
meta$system = system
if (system == "atlas_E8.5_tal1"){
meta$system = paste0(meta$system , "_" , meta$tomato)
}
meta = meta[, c("cell" , "sample" , "celltype" , "system" , "V1" , "V2", rownames(sce))]
return(meta)
}
corr.thresh = 0.5
rank.thresh = 150
genes = list("wt_chimera" = genes_WT_chimera , "tal1_false" = genes_tal1_chimera_false , "tal1_true" = genes_tal1_chimera_true)
stat = lapply(1:length(genes) , function(i){
current.genes = genes[[i]]
current.stat = compare_gene_selections(sce , current.genes , genes_atlas_E8.5 , corr.thresh = corr.thresh, rank.thresh = 250)
current.stat$id = names(genes)[i]
return(current.stat)
})
rownames(sce) = rowData(sce)[,2]
corr.thresh = 0.5
rank.thresh = 150
genes = list("wt_chimera" = genes_WT_chimera , "tal1_false" = genes_tal1_chimera_false , "tal1_true" = genes_tal1_chimera_true)
stat = lapply(1:length(genes) , function(i){
current.genes = genes[[i]]
current.stat = compare_gene_selections(sce , current.genes , genes_atlas_E8.5 , corr.thresh = corr.thresh, rank.thresh = 250)
current.stat$id = names(genes)[i]
return(current.stat)
})
stat = do.call(rbind , stat)
stat = merge(stat , rowdata , all.x = T, all.y = F)
stat = stat[stat$rank <= rank.thresh , ]
# select genes that pop in all 3
tab = table(stat$gene_symbol)
genes_consistent = names(tab)[tab > 1]
genes_consistent
genes_tal1_chimera_false
genes_tal1_chimera_false[1:4,]
sce
i = 1
genes = list("wt_chimera" = genes_WT_chimera , "tal1_false" = genes_tal1_chimera_false , "tal1_true" = genes_tal1_chimera_true)
current.genes = genes[[i]]
current.stat = compare_gene_selections(sce , current.genes , genes_atlas_E8.5 , corr.thresh = corr.thresh, rank.thresh = 250)
current.stat = compare_gene_selections(sce , current.genes , genes_atlas_E8.5 , corr.thresh = corr.thresh, rank.thresh = 250)
current.stat
genes = list("wt_chimera" = genes_WT_chimera , "tal1_false" = genes_tal1_chimera_false , "tal1_true" = genes_tal1_chimera_true)
stat = lapply(1:length(genes) , function(i){
current.genes = genes[[i]]
current.stat = compare_gene_selections(sce , current.genes , genes_atlas_E8.5 , corr.thresh = corr.thresh, rank.thresh = 250)
current.stat$id = names(genes)[i]
return(current.stat)
})
stat = do.call(rbind , stat)
stat = stat[stat$rank <= rank.thresh , ]
# select genes that pop in all 3
tab = table(stat$gene_symbol)
tab
stat
genes_tal1_chimera_true[genes_tal1_chimera_true$gene == "Cdv3" , ]
genes_tal1_chimera_true[genes_tal1_chimera_false$gene == "Cdv3" , ]
genes_tal1_chimera_false[genes_tal1_chimera_false$gene == "Cdv3" , ]
genes_WT_chimera[genes_WT_chimera$gene == "Cdv3" , ]
genes_WT_chimera[genes_WT_chimera$gene == "Cbx3" , ]
genes_tal1_chimera_false[genes_tal1_chimera_false$gene == "Cbx3" , ]
genes_WT_chimera[genes_WT_chimera$gene == "Cbx3" , ]
genes_tal1_chimera_true[genes_tal1_chimera_true$gene == "Cbx3" , ]
stat
system
# read gene selection
genes_atlas_E8.5 = readRDS(paste0(root.dir , "data/gene_selection/" , "atlas_E8.5" , "/gene_selection.Rds"))
genes_atlas_E8.5 = merge(genes_atlas_E8.5 , rowdata )
genes_atlas_E8.5 = genes_atlas_E8.5[, c( "gene_symbol" , "rank")]
colnames(genes_atlas_E8.5) = c("gene" , "rank")
genes_atlas_E8.5 = genes_atlas_E8.5[order(genes_atlas_E8.5$rank) , ]
genes_atlas_E8.5[genes_atlas_E8.5$gene == "Cdv3" , ]
genes_atlas_E8.5[genes_atlas_E8.5$gene == "Cbx3" , ]
# select genes that pop in all 3
tab = table(stat$gene)
tab
corr.thresh = 0.5
rank.thresh = 100
genes = list("wt_chimera" = genes_WT_chimera , "tal1_false" = genes_tal1_chimera_false , "tal1_true" = genes_tal1_chimera_true)
stat = lapply(1:length(genes) , function(i){
current.genes = genes[[i]]
current.stat = compare_gene_selections(sce , current.genes , genes_atlas_E8.5 , corr.thresh = corr.thresh, rank.thresh = 250)
current.stat$id = names(genes)[i]
return(current.stat)
})
stat = do.call(rbind , stat)
stat = stat[stat$rank <= rank.thresh , ]
# select genes that pop in all 3
tab = table(stat$gene)
genes_consistent = names(tab)[tab == 3]
genes_consistent
corr.thresh = 0.5
rank.thresh = 150
genes = list("wt_chimera" = genes_WT_chimera , "tal1_false" = genes_tal1_chimera_false , "tal1_true" = genes_tal1_chimera_true)
stat = lapply(1:length(genes) , function(i){
current.genes = genes[[i]]
current.stat = compare_gene_selections(sce , current.genes , genes_atlas_E8.5 , corr.thresh = corr.thresh, rank.thresh = 250)
current.stat$id = names(genes)[i]
return(current.stat)
})
stat = do.call(rbind , stat)
stat = stat[stat$rank <= rank.thresh , ]
# select genes that pop in all 3
tab = table(stat$gene)
genes_consistent = names(tab)[tab == 3]
genes_consistent
# get corresponding umaps
systems = c("atlas_E8.5" , "atlas_E8.5_chimera_WT" , "atlas_E8.5_tal1")
meta_all = lapply(systems , function(system){
print(system)
meta = get_meta(system , genes_consistent)
return(meta)
})
meta_all = do.call(rbind , meta_all)
plots = lapply(genes_consistent , function(gene){
p = get_plot(meta_all , gene)
ggsave(filename = paste0(figures.dir, "against_wt/chimera/" , gene , ".png"), plot = p, width = 7, height = 4)
print(p)
})
meta_all[1:10,]
celltype_cols = celltype_colors[[which( names(celltype_colors) == "atlas_E8.5" )]]
plot_expr_distribution = function(meta_all , gene){
p = ggplot(meta_all , aes(x = celltype , y = meta_all[, gene] , fill = celltype)) +
geom_boxplot() +
scale_fill_manual(values = celltype_cols) +
theme_classic() +
facet_wrap(~system) +
theme(axis.text.x = element_blank()) +
ggtitle(gene)
return(p)
}
plots = lapply(genes_consistent , function(gene){
p = plot_expr_distribution(meta_all , gene)
ggsave(filename = paste0(figures.dir, "against_wt/chimera/boxplot_all/" , gene , ".png"), plot = p, width = 7, height = 4)
print(p)
})
plot_expr_distribution = function(meta_all , gene){
p = ggplot(meta_all , aes(x = system , y = meta_all[, gene] , fill = system)) +
geom_boxplot() +
#scale_fill_manual(values = celltype_cols) +
theme_classic() +
facet_wrap(~celltype) +
theme(axis.text.x = element_blank()) +
ggtitle(gene)
return(p)
}
plots = lapply(genes_consistent , function(gene){
p = plot_expr_distribution(meta_all , gene)
ggsave(filename = paste0(figures.dir, "against_wt/chimera/boxplot_all/" , gene , ".png"), plot = p, width = 7, height = 4)
print(p)
})
plot_expr_distribution = function(meta_all , gene){
p = ggplot(meta_all , aes(x = celltype , y = meta_all[, gene] , fill = celltype)) +
geom_boxplot() +
scale_fill_manual(values = celltype_cols) +
theme_classic() +
facet_wrap(~system) +
theme(axis.text.x = element_blank()) +
theme(legend.position = "none")
ggtitle(gene)
return(p)
}
plots = lapply(genes_consistent , function(gene){
p = plot_expr_distribution(meta_all , gene)
ggsave(filename = paste0(figures.dir, "against_wt/chimera/boxplot_all/" , gene , ".png"), plot = p, width = 7, height = 4)
print(p)
})
library(aquila)
get_moran_score = function(sce , genes , nPC = 50 , assay = "logcounts" , genes.predict ){
snn.graph = as.matrix( as_adjacency_matrix( buildSNNGraph(assay(sce[genes , ], "logcounts") , d = nPC)) )
snn.graph = snn.graph*0.9999
counts = as.matrix(assay(sce[genes.predict , ] , assay))
moran.score = aquila::MoransI(values = counts , weights = snn.graph, temp_dir = "~/Develop/test")
colnames(moran.score) = c("gene" , "moran")
return(moran.score)
}
get_moran_score = function(system , celltypes , nPC = 50 , genes.predict ){
sce = readRDS(paste0(root.dir , "data/scRNA_datasets/" , system , "/sce_" , system , ".Rds"))
rownames(sce) = rowData(sce)[,2]
if (!celltypes == "all"){
sce = sce[, sce$celltype %in% celltypes]
}
sce = retain_only_hvgs(sce , n = 3000)
snn.graph = as.matrix( as_adjacency_matrix( buildSNNGraph(assay(sce, "logcounts") , d = nPC)) )
snn.graph = snn.graph*0.9999
counts = as.matrix(assay(sce[genes.predict , ] , "logcounts"))
moran.score = aquila::MoransI(values = counts , weights = snn.graph, temp_dir = "~/Develop/test")
colnames(moran.score) = c("gene" , "moran")
return(moran.score)
}
genes_consistent
get_moran_score = function(system , celltypes , nPC = 50 , genes.predict){
sce = readRDS(paste0(root.dir , "data/scRNA_datasets/" , system , "/sce_" , system , ".Rds"))
rownames(sce) = rowData(sce)[,2]
if (!celltypes == "all"){
sce = sce[, sce$celltype %in% celltypes]
}
sce = retain_only_hvgs(sce , n = 3000)
snn.graph = as.matrix( as_adjacency_matrix( buildSNNGraph(assay(sce, "logcounts") , d = nPC)) )
snn.graph = snn.graph*0.9999
counts = as.matrix(assay(sce[genes.predict , ] , "logcounts"))
moran.score = aquila::MoransI(values = counts , weights = snn.graph, temp_dir = "~/Develop/test")
colnames(moran.score) = c("gene" , "moran")
return(moran.score)
}
# get corresponding umaps
systems = c("atlas_E8.5" , "atlas_E8.5_chimera_WT" , "atlas_E8.5_tal1")
moran_all = lapply(systems , function(system){
current.moran = get_moran_score(system , celltypes = "all", nPC = 50 , genes.predict = genes_consistent)
current.moran$system = system
return(current.moran)
})
library(aquila)
get_moran_score = function(system , celltypes , nPC = 50 , genes.predict){
sce = readRDS(paste0(root.dir , "data/scRNA_datasets/" , system , "/sce_" , system , ".Rds"))
rownames(sce) = rowData(sce)[,2]
if (!celltypes == "all"){
sce = sce[, sce$celltype %in% celltypes]
}
hvgs = retain_only_hvgs(sce , n = 3000)
snn.graph = as.matrix( as_adjacency_matrix( buildSNNGraph(assay(sce[hvgs,], "logcounts") , d = nPC)) )
snn.graph = snn.graph*0.9999
counts = as.matrix(assay(sce[genes.predict , ] , "logcounts"))
moran.score = aquila::MoransI(values = counts , weights = snn.graph, temp_dir = "~/Develop/test")
colnames(moran.score) = c("gene" , "moran")
return(moran.score)
}
# get corresponding umaps
systems = c("atlas_E8.5" , "atlas_E8.5_chimera_WT" , "atlas_E8.5_tal1")
moran_all = lapply(systems , function(system){
current.moran = get_moran_score(system , celltypes = "all", nPC = 50 , genes.predict = genes_consistent)
current.moran$system = system
return(current.moran)
})
dim(sce)
hvgs = retain_only_hvgs(sce , n = 3000)
sce
hvgs = get_hvgs(sce , n = 3000)
snn.graph = as.matrix( as_adjacency_matrix( buildSNNGraph(logcounts(sce[hvgs,]) , d = nPC)) )
get_moran_score = function(system , celltypes , nPC = 50 , genes.predict){
sce = readRDS(paste0(root.dir , "data/scRNA_datasets/" , system , "/sce_" , system , ".Rds"))
rownames(sce) = rowData(sce)[,2]
if (!celltypes == "all"){
sce = sce[, sce$celltype %in% celltypes]
}
hvgs = get_hvgs(sce , n = 3000)
snn.graph = as.matrix( as_adjacency_matrix( buildSNNGraph(logcounts(sce[hvgs,]) , d = nPC)) )
snn.graph = snn.graph*0.9999
counts = as.matrix(assay(sce[genes.predict , ] , "logcounts"))
moran.score = aquila::MoransI(values = counts , weights = snn.graph, temp_dir = "~/Develop/test")
colnames(moran.score) = c("gene" , "moran")
return(moran.score)
}
# get corresponding umaps
systems = c("atlas_E8.5" , "atlas_E8.5_chimera_WT" , "atlas_E8.5_tal1")
moran_all = lapply(systems , function(system){
current.moran = get_moran_score(system , celltypes = "all", nPC = 50 , genes.predict = genes_consistent)
current.moran$system = system
return(current.moran)
})
dim(sce)
